function OrgChart(a) { this.CanvasId = a; this.Canvas = document.getElementById(a); this.Canvas2D = this.Canvas.getContext("2d"); this.Canvas2D.font = Utility.Font; this.Cubes = []; this.LevelHeight = []; this.Final = null; this.NodeClick = null; this.NodeSearch = null; var b = this; this.Canvas.onmousemove = function (a) { if (Utility.IsFunction(b.NodeClick) || Utility.IsFunction(b.NodeSearch)) { if (a == undefined) { a = window.event } var c = b.GetClickedCube(a.offsetX, a.offsetY); if (!Utility.IsNull(c)) { document.body.style.cursor = "pointer" } else { document.body.style.cursor = "" } } }; this.Canvas.onclick = function (a) { if (Utility.IsFunction(b.NodeClick) || Utility.IsFunction(b.NodeSearch)) { if (a == undefined) { a = window.event } var c = b.GetClickedCube(a.offsetX, a.offsetY); if (!Utility.IsNull(c)) { if (c.IsInSearch(a.offsetX, a.offsetY)) { b.NodeSearch(c.Id) } else if (Utility.IsFunction(b.NodeClick)) { b.NodeClick(c.Id) } } } } } function Cube(a, b, c) { if (a == undefined || b == undefined || c == undefined) { throw "ID, Parent, Name are required field for a cube" } this.Id = a; this.ParentId = b; this.Name = c.n; this.Color = c.c; this.Image = c.i; if (!Utility.IsNull(this.Image) && Utility.IsNull(this.Image.dim)) { this.Image.dim = Utility.ImageDimen } this.Level = 0; this.LevelMaxNodes = 1; this.Depth = 0; this.TotalHeight = 0; this.Size = 1; this.Dimen = { width: Utility.MinCubeWidth, height: Utility.TextMargin }; this.Span = 0; this.Lines = []; this.Children = []; this.Position = { x: Utility.CubeGap, y: Utility.LevelGap }; this.SeperatorY = 999999; this.Context = null; this.OC = null } var Utility = new function () { this.IsSolid = function (a) { if (this.IsNull(a)) { return false } if (typeof a === "boolean") { return a } return true }; this.IsFunction = function (a) { return !this.IsNull(a) && typeof a === "function" }; this.IsNull = function (a) { return a === null || a === undefined }; this.Each = function (a, b) { for (var c = 0; c < a.length; ++c) { var d = b(a[c], c); if (Utility.IsSolid(d)) { return d } } return null }; this.DrawCircle = function (a, b, c, d, e, f) { a.fillStyle = e; a.beginPath(); a.arc(b, c, d, 0, 2 * Math.PI, false); a.strokeStyle = f; a.stroke() }; this.DrawConnection = function (a, b, c) { this.DrawLine(a, b, c, Utility.LineWidth, Utility.LineColor) }; this.DrawSeperator = function (a, b, c) { this.DrawLine(a, b, c, .5, Utility.CommandColor) }; this.DrawLine = function (a, b, c, d, e) { a.beginPath(); a.lineWidth = d; a.strokeStyle = e; a.moveTo(b.x, b.y); a.lineTo(c.x, c.y); a.stroke() }; this.DrawRect = function (a, b, c) { a.strokeStyle = Utility.CubeBd; a.fillStyle = Utility.CubeBg; var d = Utility.LineWidth; a.lineWidth = d; a.fillRect(b.x + d, b.y + d, c.width - 2 * d, c.height - 2 * d); a.strokeRect(b.x, b.y, c.width, c.height) }; this.DrawText = function (a, b, c, d) { a.fillStyle = d; a.fillText(c, b.x, b.y) }; this.SearchClickedOne = function (a, b, c) { if (a.ClickMe(b, c)) return a; return this.Each(a.Children, function (a) { return Utility.SearchClickedOne(a, b, c) }) }; this.MaxCubeWidth = 120; this.MinCubeWidth = 50; this.MinCubeHeight = 50; this.MaxCubeHeight = 150; this.LevelGap = 40; this.CubeGap = 10; this.TextMargin = 4; this.LineHeight = 10; this.CubeBg = "rgb(237, 247, 255)"; this.CubeBd = "rgb(181, 217, 234)"; this.LineColor = "rgb(51,136,221)"; this.CommandColor = "gray"; this.Font = "10px Sans-Serif"; this.SearchUI = "search"; this.LineWidth = 2; this.ImageDimen = { width: 70, height: 70} }; Cube.prototype.HasSearch = function () { return !Utility.IsNull(this.OC.NodeSearch) }; Cube.prototype.IsInSearch = function (a, b) { return this.HasSearch() && b > this.SeperatorY }; Cube.prototype.AddChild = function (a) { this.Children.push(a) }; Cube.prototype.RefreshLevel = function () { var a = this.Level; return Utility.Each(this.Children, function (b) { b.Level = a + 1; return b.RefreshLevel() }) }; Cube.prototype.Count = function (a) { if (Utility.IsNull(a[this.Level])) { a[this.Level] = 1 } else { a[this.Level] += 1 } Utility.Each(this.Children, function (b) { b.Count(a) }) }; Cube.prototype.SetLevelInfo = function () { var a = {}; this.Count(a); var b = 1; var c = 1; for (var d in a) { c++; if (a[d] > b) { b = a[d] } } this.LevelMaxNodes = b; this.Depth = c }; Cube.prototype.RealSpan = function () { return Math.max(this.Span, this.Dimen.width) }; Cube.prototype.ComputeSpan = function () { this.ComputeDimension(); var a = 0; var b = 1; if (this.Children.length > 0) { a = (this.Children.length - 1) * Utility.CubeGap; for (var c = 0; c < this.Children.length; ++c) { a += this.Children[c].ComputeSpan(); b += this.Children[c].Size } } this.Size = b; this.Span = a; return this.RealSpan() }; Cube.prototype.GetTextWidth = function (a) { return this.Context.measureText(a).width + 2 * Utility.TextMargin }; Cube.prototype.ComputeDimension = function () { if (Utility.IsNull(this.Image)) { var a = this.GetTextWidth(this.Name); if (a < Utility.MaxCubeWidth) { this.AddLine(this.Name) } else { var b = this.Name.split(" "); var c = b[0]; for (var d = 1; d < b.length; ++d) { if (this.GetTextWidth(c + " " + b[d]) >= Utility.MaxCubeWidth) { this.AddLine(c); c = b[d] } else { c = c + " " + b[d] } } if (c.length > 0) { this.AddLine(c) } } } else { this.Dimen.width = this.Image.dim.width + 2 * Utility.TextMargin; this.Dimen.height = this.Image.dim.height + 2 * Utility.TextMargin; if (!Utility.IsNull(this.Image.text)) { var e = this.Image.text; var f = 0; var g = e.length * Utility.LineHeight + (e.length + 1) * Utility.TextMargin; for (var d = 0; d < e.length; ++d) { this.Lines.push(e[d]); var h = this.GetTextWidth(e[d]); if (h > f) { f = h } } this.Dimen.width += f + Utility.TextMargin; if (g > this.Dimen.height) { this.Dimen.height = g } } } if (this.HasSearch()) { this.Dimen.height += 2 * Utility.TextMargin + Utility.LineHeight } if (this.Dimen.height < Utility.MinCubeHeight) { this.Dimen.height = Utility.MinCubeHeight } }; Cube.prototype.AddLine = function (a) { this.Lines.push(a); var b = this.GetTextWidth(a); if (b > this.Dimen.width) { this.Dimen.width = b } this.Dimen.height += Utility.LineHeight + Utility.TextMargin }; Cube.prototype.FindNode = function (a) { if (this.Id == a) return this; return Utility.Each(this.Children, function (b, c) { return b.FindNode(a) }) }; Cube.prototype.ClickMe = function (a, b) { return a > this.Position.x && a < this.Position.x + this.Dimen.width && b > this.Position.y && b < this.Position.y + this.Dimen.height }; Cube.prototype.Draw = function () { Utility.DrawRect(this.Context, this.Position, this.Dimen); var a = this.Position.x + Utility.TextMargin; var b = this.Position.y + +Utility.TextMargin + Utility.LineHeight; if (!Utility.IsNull(this.Image)) { var c = new Image; c.src = this.Image.src; c.cube = this; c.onload = function () { window.setTimeout("void()", "1000"); var a = this.cube.Image.dim; if (Utility.IsNull(a)) { a = Utility.ImageDimen } this.cube.Context.drawImage(this, this.cube.Position.x + Utility.TextMargin, this.cube.Position.y + Utility.TextMargin, a.width, a.height) }; a += this.Image.dim.width + Utility.TextMargin } for (var d = 0; d < this.Lines.length; ++d) { Utility.DrawText(this.Context, { x: a, y: b }, this.Lines[d], this.Color); b += Utility.TextMargin + Utility.LineHeight } if (this.HasSearch()) { this.SeperatorY = this.Position.y + this.Dimen.height - 2 * Utility.TextMargin - Utility.LineHeight; Utility.DrawSeperator(this.Context, { x: this.Position.x + Utility.TextMargin, y: this.SeperatorY }, { x: this.Position.x + this.Dimen.width - Utility.TextMargin, y: this.SeperatorY }); Utility.DrawText(this.Context, { x: this.Position.x + this.Dimen.width - Utility.TextMargin - this.GetTextWidth(Utility.SearchUI), y: this.SeperatorY + Utility.LineHeight + Utility.TextMargin }, Utility.SearchUI, Utility.CommandColor) } Utility.Each(this.Children, function (a) { return a.Draw() }); if (this.Children.length > 0) { var e = { x: this.Position.x + this.Dimen.width / 2, y: this.Position.y + this.Dimen.height }; Utility.DrawConnection(this.Context, e, { x: e.x, y: e.y + Utility.LevelGap / 2 }); for (var d = 0; d < this.Children.length; ++d) { var f = { x: this.Children[d].Position.x + this.Children[d].Dimen.width / 2, y: this.Children[d].Position.y }; Utility.DrawConnection(this.Context, f, { x: f.x, y: f.y - Utility.LevelGap / 2 }) } if (this.Children.length > 1) { var g = this.Children[0]; var h = { x: g.Position.x + g.Dimen.width / 2, y: g.Position.y - Utility.LevelGap / 2 }; var i = this.Children[this.Children.length - 1]; var j = { x: i.Position.x + i.Dimen.width / 2, y: i.Position.y - Utility.LevelGap / 2 }; Utility.DrawConnection(this.Context, h, j) } } return null }; OrgChart.prototype.GetClickedCube = function (a, b) { if (!Utility.IsNull(this.Final)) { return Utility.SearchClickedOne(this.Final, a, b) } return null }; OrgChart.prototype.Push = function (a) { a.Context = this.Canvas2D; a.OC = this; while (true) { var b = Utility.Each(this.Cubes, function (b, c) { if (b.ParentId == a.Id) { return c } }); if (Utility.IsNull(b)) { break } var c = this.Cubes.splice(b, 1)[0]; a.AddChild(c) } var d = Utility.Each(this.Cubes, function (b, c) { return b.FindNode(a.ParentId) }); if (!Utility.IsNull(d)) { d.AddChild(a) } else { this.Cubes.push(a) } }; OrgChart.prototype.Layout = function (a) { a.RefreshLevel(); a.SetLevelInfo(); Utility.MaxCubeWidth = a.Context.canvas.width / a.LevelMaxNodes; a.ComputeSpan(); this.LevelHeight.length = 0; var b = []; b.push(a); this.LevelHeight.push(a.Dimen.height); a.Position.x = a.RealSpan() / 2 - a.Dimen.width / 2; while (b.length > 0) { var c = b.shift(); if (c.Level == this.LevelHeight.length - 1) { if (c.Dimen.height > this.LevelHeight[this.LevelHeight.length - 1]) { this.LevelHeight[this.LevelHeight.length - 1] = c.Dimen.height } } else { this.LevelHeight.push(c.Dimen.height) } var d = c.Position.x + c.Dimen.width / 2 - c.RealSpan() / 2; if (c.Dimen.width > c.Span) { d += (c.Dimen.width - c.Span) / 2 } var e = c.Position.y + c.Dimen.height + Utility.LevelGap; for (var f = 0; f < c.Children.length; ++f) { var g = c.Children[f]; g.Position.x = d + g.RealSpan() / 2 - g.Dimen.width / 2; if (c.Children.length == 1) { } g.Position.y = e; d += g.RealSpan() + Utility.CubeGap; b.push(g) } } a.TotalHeight = Utility.LevelGap; for (var f = 0; f < this.LevelHeight.length; ++f) { a.TotalHeight += this.LevelHeight[f] + Utility.LevelGap } }; OrgChart.prototype.Draw = function () { this.Canvas2D.clearRect(0, 0, this.Canvas.width, this.Canvas.height); var a = this; Utility.Each(this.Cubes, function (b) { a.Layout(b); return null }); if (this.Cubes.length > 0) { this.Final = this.Cubes[0]; for (var b = 1; b < this.Cubes.length; ++b) { if (this.Cubes[b].Size > this.Final.Size) { this.Final = this.Cubes[b] } } this.Canvas.width = this.Final.RealSpan() + 2 * Utility.CubeGap; this.Canvas.height = this.Final.TotalHeight; this.Final.Draw() } }